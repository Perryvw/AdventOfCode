(declare-const x0 Int)
(declare-const inp0 Int)
(declare-const z0 Int)
(declare-const x1 Int)
(declare-const inp1 Int)
(declare-const z1 Int)
(declare-const x2 Int)
(declare-const inp2 Int)
(declare-const z2 Int)
(declare-const x3 Int)
(declare-const inp3 Int)
(declare-const z3 Int)
(declare-const x4 Int)
(declare-const inp4 Int)
(declare-const z4 Int)
(declare-const x5 Int)
(declare-const inp5 Int)
(declare-const z5 Int)
(declare-const x6 Int)
(declare-const inp6 Int)
(declare-const z6 Int)
(declare-const x7 Int)
(declare-const inp7 Int)
(declare-const z7 Int)
(declare-const x8 Int)
(declare-const inp8 Int)
(declare-const z8 Int)
(declare-const x9 Int)
(declare-const inp9 Int)
(declare-const z9 Int)
(declare-const x10 Int)
(declare-const inp10 Int)
(declare-const z10 Int)
(declare-const x11 Int)
(declare-const inp11 Int)
(declare-const z11 Int)
(declare-const x12 Int)
(declare-const inp12 Int)
(declare-const z12 Int)
(declare-const x13 Int)
(declare-const inp13 Int)
(declare-const z13 Int)
(declare-const z14 Int)

(assert (= z0 0))
(assert (= z14 0))

(assert (= x0 (ite (not (= (+ (mod z0 26) 14) inp0)) 1 0)))
(assert (= z1 (+ (* (div z0 1) (+ (* 25 x0) 1) ) (* x0 (+ inp0 12) ) ) ) )
(assert (= x1 (ite (not (= (+ (mod z1 26) 13) inp1)) 1 0)))
(assert (= z2 (+ (* (div z1 1) (+ (* 25 x1) 1) ) (* x1 (+ inp1 6) ) ) ) )
(assert (= x2 (ite (not (= (+ (mod z2 26) 12) inp2)) 1 0)))
(assert (= z3 (+ (* (div z2 1) (+ (* 25 x2) 1) ) (* x2 (+ inp2 4) ) ) ) )
(assert (= x3 (ite (not (= (+ (mod z3 26) 14) inp3)) 1 0)))
(assert (= z4 (+ (* (div z3 1) (+ (* 25 x3) 1) ) (* x3 (+ inp3 5) ) ) ) )
(assert (= x4 (ite (not (= (+ (mod z4 26) 13) inp4)) 1 0)))
(assert (= z5 (+ (* (div z4 1) (+ (* 25 x4) 1) ) (* x4 (+ inp4 0) ) ) ) )
(assert (= x5 (ite (not (= (+ (mod z5 26) -7) inp5)) 1 0)))
(assert (= z6 (+ (* (div z5 26) (+ (* 25 x5) 1) ) (* x5 (+ inp5 4) ) ) ) )
(assert (= x6 (ite (not (= (+ (mod z6 26) -13) inp6)) 1 0)))
(assert (= z7 (+ (* (div z6 26) (+ (* 25 x6) 1) ) (* x6 (+ inp6 15) ) ) ) )
(assert (= x7 (ite (not (= (+ (mod z7 26) 10) inp7)) 1 0)))
(assert (= z8 (+ (* (div z7 1) (+ (* 25 x7) 1) ) (* x7 (+ inp7 14) ) ) ) )
(assert (= x8 (ite (not (= (+ (mod z8 26) -7) inp8)) 1 0)))
(assert (= z9 (+ (* (div z8 26) (+ (* 25 x8) 1) ) (* x8 (+ inp8 6) ) ) ) )
(assert (= x9 (ite (not (= (+ (mod z9 26) 11) inp9)) 1 0)))
(assert (= z10 (+ (* (div z9 1) (+ (* 25 x9) 1) ) (* x9 (+ inp9 14) ) ) ) )
(assert (= x10 (ite (not (= (+ (mod z10 26) -9) inp10)) 1 0)))
(assert (= z11 (+ (* (div z10 26) (+ (* 25 x10) 1) ) (* x10 (+ inp10 8) ) ) ) )
(assert (= x11 (ite (not (= (+ (mod z11 26) -2) inp11)) 1 0)))
(assert (= z12 (+ (* (div z11 26) (+ (* 25 x11) 1) ) (* x11 (+ inp11 5) ) ) ) )
(assert (= x12 (ite (not (= (+ (mod z12 26) -9) inp12)) 1 0)))
(assert (= z13 (+ (* (div z12 26) (+ (* 25 x12) 1) ) (* x12 (+ inp12 14) ) ) ) )
(assert (= x13 (ite (not (= (+ (mod z13 26) -14) inp13)) 1 0)))
(assert (= z14 (+ (* (div z13 26) (+ (* 25 x13) 1) ) (* x13 (+ inp13 4) ) ) ) )
(assert (> inp0 0))
(assert (> inp1 0))
(assert (> inp2 0))
(assert (> inp3 0))
(assert (> inp4 0))
(assert (> inp5 0))
(assert (> inp6 0))
(assert (> inp7 0))
(assert (> inp8 0))
(assert (> inp9 0))
(assert (> inp10 0))
(assert (> inp11 0))
(assert (> inp12 0))
(assert (> inp13 0))
(assert (<= inp0 9))
(assert (<= inp1 9))
(assert (<= inp2 9))
(assert (<= inp3 9))
(assert (<= inp4 9))
(assert (<= inp5 9))
(assert (<= inp6 9))
(assert (<= inp7 9))
(assert (<= inp8 9))
(assert (<= inp9 9))
(assert (<= inp10 9))
(assert (<= inp11 9))
(assert (<= inp12 9))
(assert (<= inp13 9))
(check-sat)
(echo "------------------------------------------")
(echo "Model: ")
(get-value (inp0 inp1 inp2 inp3 inp4 inp5 inp6 inp7 inp8 inp9 inp10 inp11 inp12 inp13))